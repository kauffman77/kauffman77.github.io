#+TITLE: Problem 4 Post-Processing and Main Tests
#+TESTY: PREFIX="prob4"
#+TESTY: USE_VALGRIND=1
# disable memory leak detection in forked children
#+TESTY: VALGRIND_PROG+=" --child-silent-after-fork=yes"

* bake_cmd_postprocess1
#+TESTY: program="./test_bake_funcs34 bake_cmd_postprocess1"
#+BEGIN_SRC sh
IF_TEST("bake_cmd_postprocess1") { 
    // Checks that post processing properly handles output redirection
    cmd_t cmd = {
      .tokens = {"echo","The","spice","must","flow",">","mantra.txt"},
      .line_number = 17,
    };
    printf("---CMD BEFORE POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
    bake_cmd_postprocess(NULL, &cmd);
    printf("\n---CMD AFTER POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
}
---OUTPUT---
---CMD BEFORE POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'echo'
  tokens[ 1] = 'The'
  tokens[ 2] = 'spice'
  tokens[ 3] = 'must'
  tokens[ 4] = 'flow'
  tokens[ 5] = '>'
  tokens[ 6] = 'mantra.txt'
  tokens[ 7] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 17
  cmd_flags = 0x00 [ -- -- -- ]
}

---CMD AFTER POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'echo'
  tokens[ 1] = 'The'
  tokens[ 2] = 'spice'
  tokens[ 3] = 'must'
  tokens[ 4] = 'flow'
  tokens[ 5] = (null)
  input_redirect = '(null)'
  output_redirect = 'mantra.txt'
  line_number = 17
  cmd_flags = 0x04 [ -- -- OR ]
}
IF_TEST("bake_cmd_postprocess1") { 
    // Checks that post processing properly handles input redirection
    cmd_t cmd = {
      .tokens = {"wc","-l","<","notes_on_sandworms.txt"},
      .line_number = 45,
    };
    printf("---CMD BEFORE POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
    bake_cmd_postprocess(NULL, &cmd);
    printf("\n---CMD AFTER POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
}
---OUTPUT---
---CMD BEFORE POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'wc'
  tokens[ 1] = '-l'
  tokens[ 2] = '<'
  tokens[ 3] = 'notes_on_sandworms.txt'
  tokens[ 4] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 45
  cmd_flags = 0x00 [ -- -- -- ]
}

---CMD AFTER POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'wc'
  tokens[ 1] = '-l'
  tokens[ 2] = (null)
  input_redirect = 'notes_on_sandworms.txt'
  output_redirect = '(null)'
  line_number = 45
  cmd_flags = 0x02 [ -- IR -- ]
}
#+END_SRC

* bake_cmd_postprocess2
#+TESTY: program="./test_bake_funcs34 bake_cmd_postprocess2"
#+BEGIN_SRC sh
IF_TEST("bake_cmd_postprocess2") { 
    // Checks that post processing properly handles input + output redirection
    cmd_t cmd = {
      .tokens = {"sed","s/fear/FEAR/g","<","i-must-not-fear.txt",">","caps.txt"},
      .line_number = 97,
    };
    printf("---CMD BEFORE POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
    bake_cmd_postprocess(NULL, &cmd);
    printf("\n---CMD AFTER POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
}
---OUTPUT---
---CMD BEFORE POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'sed'
  tokens[ 1] = 's/fear/FEAR/g'
  tokens[ 2] = '<'
  tokens[ 3] = 'i-must-not-fear.txt'
  tokens[ 4] = '>'
  tokens[ 5] = 'caps.txt'
  tokens[ 6] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 97
  cmd_flags = 0x00 [ -- -- -- ]
}

---CMD AFTER POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'sed'
  tokens[ 1] = 's/fear/FEAR/g'
  tokens[ 2] = (null)
  input_redirect = 'i-must-not-fear.txt'
  output_redirect = 'caps.txt'
  line_number = 97
  cmd_flags = 0x06 [ -- IR OR ]
}
#+END_SRC

* bake_cmd_postprocess3
#+TESTY: program="./test_bake_funcs34 bake_cmd_postprocess3"
#+BEGIN_SRC sh
IF_TEST("bake_cmd_postprocess3") { 
    // Checks that post processing properly handles the @ silence sigil
    cmd_t cmd = {
      .tokens = {"@","echo","I","must","not","fear"},
      .line_number = 88,
    };
    printf("---CMD BEFORE POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
    bake_cmd_postprocess(NULL, &cmd);
    printf("\n---CMD AFTER POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
}
---OUTPUT---
---CMD BEFORE POSTPROCESSING---
cmd_t {
  tokens[ 0] = '@'
  tokens[ 1] = 'echo'
  tokens[ 2] = 'I'
  tokens[ 3] = 'must'
  tokens[ 4] = 'not'
  tokens[ 5] = 'fear'
  tokens[ 6] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 88
  cmd_flags = 0x00 [ -- -- -- ]
}

---CMD AFTER POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'echo'
  tokens[ 1] = 'I'
  tokens[ 2] = 'must'
  tokens[ 3] = 'not'
  tokens[ 4] = 'fear'
  tokens[ 5] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 88
  cmd_flags = 0x01 [ SI -- -- ]
}
#+END_SRC

* bake_cmd_postprocess4
#+TESTY: program="./test_bake_funcs34 bake_cmd_postprocess4"
#+BEGIN_SRC sh
IF_TEST("bake_cmd_postprocess4") { 
    // Checks that post processing properly handles combinations of
    // input/output redirection and silencing. The order of
    // input/output redirect is opposite from a previous combination
    // test.
    cmd_t cmd = {
      .tokens = {"@","sed","s/fear/FEAR/g",">","caps.txt","<","i-must-not-fear.txt"},
      .line_number = 88,
    };
    printf("---CMD BEFORE POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
    bake_cmd_postprocess(NULL, &cmd);
    printf("\n---CMD AFTER POSTPROCESSING---\n");
    bake_show_cmd(&cmd, 0);
}
---OUTPUT---
---CMD BEFORE POSTPROCESSING---
cmd_t {
  tokens[ 0] = '@'
  tokens[ 1] = 'sed'
  tokens[ 2] = 's/fear/FEAR/g'
  tokens[ 3] = '>'
  tokens[ 4] = 'caps.txt'
  tokens[ 5] = '<'
  tokens[ 6] = 'i-must-not-fear.txt'
  tokens[ 7] = (null)
  input_redirect = '(null)'
  output_redirect = '(null)'
  line_number = 88
  cmd_flags = 0x00 [ -- -- -- ]
}

---CMD AFTER POSTPROCESSING---
cmd_t {
  tokens[ 0] = 'sed'
  tokens[ 1] = 's/fear/FEAR/g'
  tokens[ 2] = (null)
  input_redirect = 'i-must-not-fear.txt'
  output_redirect = 'caps.txt'
  line_number = 88
  cmd_flags = 0x07 [ SI IR OR ]
}
#+END_SRC

* bake_post_process1
#+TESTY: program="./test_bake_funcs34 bake_post_process1"
#+BEGIN_SRC sh
IF_TEST("bake_post_process1") { 
    // Load a Bakefile and post-process it via bake_post_process() to
    // adjust commands with I/O redirection and silencing. Print out
    // the resulting bake and iterate over the commamnds displaying
    // them with bake_print_cmd().
    bake_t *bake =
      bake_create_from_file("data34/bake_postprocess1/Dunefile");
    printf("---BAKE BEFORE POSTPROCESSING---\n");
    bake_show_bake(bake, 0);
    bake_post_process(bake);
    printf("---BAKE AFTER POSTPROCESSING---\n");
    bake_show_bake(bake, 0);
    printf("---CALLING bake_print_cmd() ON EACH COMMAND---\n");
    printf("Note: silenced commands won't print\n");
    for(int i=0; i<bake->rule_count; i++){
      for(int j=0; j<bake->rules[i].cmd_count; j++){
        printf("rules[%d].cmds[%d]:\n",i,j);
        bake_print_cmd(&bake->rules[i].cmds[j]);
      }
    }
    bake_free(bake);
}
---OUTPUT---
---BAKE BEFORE POSTPROCESSING---
bake_t {
  filename = data34/bake_postprocess1/Dunefile
  rule_capacity = 4
  rule_count = 3
  rules[ 0] =
    rule_t {
      target = litany1
      deps[ 0] = 'bene_gesserit'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 3
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'I'
          tokens[ 2] = 'must'
          tokens[ 3] = 'not'
          tokens[ 4] = 'fear'
          tokens[ 5] = '>'
          tokens[ 6] = 'first.txt'
          tokens[ 7] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'Fear'
          tokens[ 3] = 'is'
          tokens[ 4] = 'the'
          tokens[ 5] = 'mind'
          tokens[ 6] = 'killer'
          tokens[ 7] = '>'
          tokens[ 8] = 'second.txt'
          tokens[ 9] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 3
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'Fear'
          tokens[ 3] = 'is'
          tokens[ 4] = 'the'
          tokens[ 5] = 'little-death'
          tokens[ 6] = 'that'
          tokens[ 7] = 'brings'
          tokens[ 8] = 'total'
          tokens[ 9] = 'obliteration.'
          tokens[10] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 4
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = counting
      deps[ 0] = 'arakis.dat'
      deps[ 1] = 'shields.dat'
      deps[ 2] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 5
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'wc'
          tokens[ 1] = '-l'
          tokens[ 2] = '<'
          tokens[ 3] = 'notes_on_sandworms.txt'
          tokens[ 4] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 7
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = 'wc'
          tokens[ 1] = '-l'
          tokens[ 2] = '<'
          tokens[ 3] = 'notes_on_sandworms.txt'
          tokens[ 4] = '>'
          tokens[ 5] = 'counts.txt'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = 'sed'
          tokens[ 1] = 's/slow/sloooow/g'
          tokens[ 2] = '<'
          tokens[ 3] = 'shield_training.txt'
          tokens[ 4] = '>'
          tokens[ 5] = 'for_paul.txt'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 9
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 3] =
        cmd_t {
          tokens[ 0] = 'sed'
          tokens[ 1] = 's/slow/sloooow/g'
          tokens[ 2] = '>'
          tokens[ 3] = 'for_paul.txt'
          tokens[ 4] = '<'
          tokens[ 5] = 'shield_training.txt'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 10
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 4] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'sed'
          tokens[ 2] = 's/slow/sloooow/g'
          tokens[ 3] = '<'
          tokens[ 4] = 'shield_training.txt'
          tokens[ 5] = '>'
          tokens[ 6] = 'for_paul.txt'
          tokens[ 7] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = litany2
      deps[ 0] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 4
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'I'
          tokens[ 3] = 'will'
          tokens[ 4] = 'face'
          tokens[ 5] = 'my'
          tokens[ 6] = 'fear.'
          tokens[ 7] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 14
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'I'
          tokens[ 3] = 'will'
          tokens[ 4] = 'permit'
          tokens[ 5] = 'it'
          tokens[ 6] = 'to'
          tokens[ 7] = 'pass'
          tokens[ 8] = 'over'
          tokens[ 9] = 'me'
          tokens[10] = 'and'
          tokens[11] = 'through'
          tokens[12] = 'me.'
          tokens[13] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 15
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'And'
          tokens[ 3] = 'when'
          tokens[ 4] = 'it'
          tokens[ 5] = 'has'
          tokens[ 6] = 'gone'
          tokens[ 7] = 'past,'
          tokens[ 8] = 'I'
          tokens[ 9] = 'will'
          tokens[10] = 'turn'
          tokens[11] = 'the'
          tokens[12] = 'inner'
          tokens[13] = 'eye'
          tokens[14] = 'to'
          tokens[15] = 'see'
          tokens[16] = 'its'
          tokens[17] = 'path.'
          tokens[18] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 16
          cmd_flags = 0x00 [ -- -- -- ]
        }
      cmds[ 3] =
        cmd_t {
          tokens[ 0] = '@'
          tokens[ 1] = 'echo'
          tokens[ 2] = 'Where'
          tokens[ 3] = 'the'
          tokens[ 4] = 'fear'
          tokens[ 5] = 'has'
          tokens[ 6] = 'gone'
          tokens[ 7] = 'there'
          tokens[ 8] = 'will'
          tokens[ 9] = 'be'
          tokens[10] = 'nothing.'
          tokens[11] = 'Only'
          tokens[12] = 'I'
          tokens[13] = 'will'
          tokens[14] = 'remain.'
          tokens[15] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 17
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
}
---BAKE AFTER POSTPROCESSING---
bake_t {
  filename = data34/bake_postprocess1/Dunefile
  rule_capacity = 4
  rule_count = 3
  rules[ 0] =
    rule_t {
      target = litany1
      deps[ 0] = 'bene_gesserit'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 3
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'I'
          tokens[ 2] = 'must'
          tokens[ 3] = 'not'
          tokens[ 4] = 'fear'
          tokens[ 5] = (null)
          input_redirect = '(null)'
          output_redirect = 'first.txt'
          line_number = 2
          cmd_flags = 0x04 [ -- -- OR ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'Fear'
          tokens[ 2] = 'is'
          tokens[ 3] = 'the'
          tokens[ 4] = 'mind'
          tokens[ 5] = 'killer'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = 'second.txt'
          line_number = 3
          cmd_flags = 0x05 [ SI -- OR ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'Fear'
          tokens[ 2] = 'is'
          tokens[ 3] = 'the'
          tokens[ 4] = 'little-death'
          tokens[ 5] = 'that'
          tokens[ 6] = 'brings'
          tokens[ 7] = 'total'
          tokens[ 8] = 'obliteration.'
          tokens[ 9] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 4
          cmd_flags = 0x01 [ SI -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = counting
      deps[ 0] = 'arakis.dat'
      deps[ 1] = 'shields.dat'
      deps[ 2] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 5
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'wc'
          tokens[ 1] = '-l'
          tokens[ 2] = (null)
          input_redirect = 'notes_on_sandworms.txt'
          output_redirect = '(null)'
          line_number = 7
          cmd_flags = 0x02 [ -- IR -- ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = 'wc'
          tokens[ 1] = '-l'
          tokens[ 2] = (null)
          input_redirect = 'notes_on_sandworms.txt'
          output_redirect = 'counts.txt'
          line_number = 8
          cmd_flags = 0x06 [ -- IR OR ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = 'sed'
          tokens[ 1] = 's/slow/sloooow/g'
          tokens[ 2] = (null)
          input_redirect = 'shield_training.txt'
          output_redirect = 'for_paul.txt'
          line_number = 9
          cmd_flags = 0x06 [ -- IR OR ]
        }
      cmds[ 3] =
        cmd_t {
          tokens[ 0] = 'sed'
          tokens[ 1] = 's/slow/sloooow/g'
          tokens[ 2] = (null)
          input_redirect = 'shield_training.txt'
          output_redirect = 'for_paul.txt'
          line_number = 10
          cmd_flags = 0x06 [ -- IR OR ]
        }
      cmds[ 4] =
        cmd_t {
          tokens[ 0] = 'sed'
          tokens[ 1] = 's/slow/sloooow/g'
          tokens[ 2] = (null)
          input_redirect = 'shield_training.txt'
          output_redirect = 'for_paul.txt'
          line_number = 11
          cmd_flags = 0x07 [ SI IR OR ]
        }
    }
  rules[ 2] =
    rule_t {
      target = litany2
      deps[ 0] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 4
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'I'
          tokens[ 2] = 'will'
          tokens[ 3] = 'face'
          tokens[ 4] = 'my'
          tokens[ 5] = 'fear.'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 14
          cmd_flags = 0x01 [ SI -- -- ]
        }
      cmds[ 1] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'I'
          tokens[ 2] = 'will'
          tokens[ 3] = 'permit'
          tokens[ 4] = 'it'
          tokens[ 5] = 'to'
          tokens[ 6] = 'pass'
          tokens[ 7] = 'over'
          tokens[ 8] = 'me'
          tokens[ 9] = 'and'
          tokens[10] = 'through'
          tokens[11] = 'me.'
          tokens[12] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 15
          cmd_flags = 0x01 [ SI -- -- ]
        }
      cmds[ 2] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'And'
          tokens[ 2] = 'when'
          tokens[ 3] = 'it'
          tokens[ 4] = 'has'
          tokens[ 5] = 'gone'
          tokens[ 6] = 'past,'
          tokens[ 7] = 'I'
          tokens[ 8] = 'will'
          tokens[ 9] = 'turn'
          tokens[10] = 'the'
          tokens[11] = 'inner'
          tokens[12] = 'eye'
          tokens[13] = 'to'
          tokens[14] = 'see'
          tokens[15] = 'its'
          tokens[16] = 'path.'
          tokens[17] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 16
          cmd_flags = 0x01 [ SI -- -- ]
        }
      cmds[ 3] =
        cmd_t {
          tokens[ 0] = 'echo'
          tokens[ 1] = 'Where'
          tokens[ 2] = 'the'
          tokens[ 3] = 'fear'
          tokens[ 4] = 'has'
          tokens[ 5] = 'gone'
          tokens[ 6] = 'there'
          tokens[ 7] = 'will'
          tokens[ 8] = 'be'
          tokens[ 9] = 'nothing.'
          tokens[10] = 'Only'
          tokens[11] = 'I'
          tokens[12] = 'will'
          tokens[13] = 'remain.'
          tokens[14] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 17
          cmd_flags = 0x01 [ SI -- -- ]
        }
    }
}
---CALLING bake_print_cmd() ON EACH COMMAND---
Note: silenced commands won't print
rules[0].cmds[0]:
echo I must not fear > first.txt 
rules[0].cmds[1]:
rules[0].cmds[2]:
rules[1].cmds[0]:
wc -l < notes_on_sandworms.txt 
rules[1].cmds[1]:
wc -l < notes_on_sandworms.txt > counts.txt 
rules[1].cmds[2]:
sed s/slow/sloooow/g < shield_training.txt > for_paul.txt 
rules[1].cmds[3]:
sed s/slow/sloooow/g < shield_training.txt > for_paul.txt 
rules[1].cmds[4]:
rules[2].cmds[0]:
rules[2].cmds[1]:
rules[2].cmds[2]:
rules[2].cmds[3]:
#+END_SRC

* bake_main01
Make a copy of the data34/bake_main01 directory, then change into that
copy and run bake to analyze and then build the programs according to
the default Bakefile. The program to build only has a single source
file with a .c to .o to program sequence of dependencies. 

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: program="../../bake"
#+BEGIN_SRC sh
bake: updating 'hello.o' via 1 command(s)
gcc -c hello.c 
bake: updating 'program' via 1 command(s)
gcc -o program hello.o 
bake complete, 2 update(s) performed
#+END_SRC

* bake_main02
Make a copy of the data34/bake_main02 directory, then change into that
copy and run bake to analyze and then build the programs according to
the default Bakefile. This directory has a slightly bigger build
tree in it with several C files and .o files that must be created.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: program="../../bake"
#+BEGIN_SRC sh
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'func1.o' via 1 command(s)
gcc -c func1.c 
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
bake complete, 4 update(s) performed
#+END_SRC

* bake_main03
An even larger build from data34/bake_main03. This test calls bake and
also uses a series of shell commands to remove files and adjust time
stamps to ensure that bake correctly detects the files that need to be
updated. Note that Valgrind is not used on bake in this test so if
memory problems ensue, manual use of Valgrind will be necessary.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> ../../bake
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'func1.o' via 1 command(s)
gcc -c func1.c 
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
bake complete, 4 update(s) performed
>> ../../bake
bake: file 'main_prog' is up to date
>> rm -f main.o
>> ../../bake
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
bake complete, 2 update(s) performed
>> touch -d -2min main_prog func2.o
>> ../../bake
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
bake complete, 2 update(s) performed
#+END_SRC

* bake_main04
Make a copy of the data34/bake_main04 directory, then change into that
copy. Run bake several times to check command line argument
handling. The following cases are checked
- Missing default Bakefile is reported
- -f <file> is handled
- bake target is handled
- bake -f <file> target is handled
Valgrind is NOT in use.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> echo 'Missing Bakefile'
Missing Bakefile
>> ../../bake
Couldn't open file: No such file or directory
ERROR: unable to process file 'Bakefile'
>> echo 'Handle -f <file> Command Line'
Handle -f <file> Command Line
>> ../../bake -f Bakefile2
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'func1.o' via 1 command(s)
gcc -c func1.c 
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
bake complete, 4 update(s) performed
>> ls -1
Bakefile2
Bakefile3
func1.c
func1.o
func2.c
func2.o
main.c
main.o
main_prog
test-results
>> cp Bakefile2 Bakefile
>> rm -f func1.o
>> echo 'Handle Target Command line'
Handle Target Command line
>> ../../bake func1.o
bake: updating 'func1.o' via 1 command(s)
gcc -c func1.c 
bake complete, 1 update(s) performed
>> ls -1
Bakefile
Bakefile2
Bakefile3
func1.c
func1.o
func2.c
func2.o
main.c
main.o
main_prog
test-results
>> rm -f main.o
>> echo 'Handle Combination Command Line'
Handle Combination Command Line
>> ../../bake -f Bakefile3 main.o
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake complete, 1 update(s) performed
>> ls -1
Bakefile
Bakefile2
Bakefile3
func1.c
func1.o
func2.c
func2.o
main.c
main.o
main_prog
test-results
#+END_SRC

* bake_main05
Checks that targets with shared dependencies only build the dependency
once: prog1 and prog2 both need x.o and it is compiled only once.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: program="../../bake"
#+BEGIN_SRC sh
bake: updating 'x.o' via 1 command(s)
gcc -c x.c 
bake: updating 'y.o' via 1 command(s)
gcc -c y.c 
bake: updating 'prog1' via 1 command(s)
gcc -o prog1 x.o y.o 
bake: updating 'z.o' via 1 command(s)
gcc -c z.c 
bake: updating 'prog2' via 1 command(s)
gcc -o prog2 x.o z.o 
bake: updating 'all' via 0 command(s)
bake complete, 6 update(s) performed
#+END_SRC

* bake_main06
Run `bake -f Bakefile2 clean` even though there are no build files to
remove. Ensure that the bake actually preforms the commands. NOTE:
this test uses a non-default Bakefile which is passed on the command line

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: program="../../bake -f Bakefile2 clean"
#+BEGIN_SRC sh
bake: updating 'clean' via 1 command(s)
rm -f x.o y.o z.o prog1 prog2 
bake complete, 1 update(s) performed
#+END_SRC

* bake_main07
Series of build commands to emulate project development including
initial build, cleaning, building a specific target.  NOTE: Valgrind
is not used to verify memory integrity in the test below so it may
require manual analysis if memory operations go awry.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> ls -1
Bakefile
test-results
x.c
y.c
z.c
>> ../../bake clean
bake: updating 'clean' via 1 command(s)
rm -f x.o y.o z.o prog1 prog2 
bake complete, 1 update(s) performed
>> ../../bake prog1
bake: updating 'x.o' via 1 command(s)
gcc -c x.c 
bake: updating 'y.o' via 1 command(s)
gcc -c y.c 
bake: updating 'prog1' via 1 command(s)
gcc -o prog1 x.o y.o 
bake complete, 3 update(s) performed
>> ls -1
Bakefile
prog1
test-results
x.c
x.o
y.c
y.o
z.c
>> ../../bake all
bake: updating 'z.o' via 1 command(s)
gcc -c z.c 
bake: updating 'prog2' via 1 command(s)
gcc -o prog2 x.o z.o 
bake: updating 'all' via 0 command(s)
bake complete, 3 update(s) performed
>> ls -1
Bakefile
prog1
prog2
test-results
x.c
x.o
y.c
y.o
z.c
z.o
>> ./prog1
running func1
I'm the Y version
>> ./prog2
running func1
I'm the Z version
>> ../../bake clean
bake: updating 'clean' via 1 command(s)
rm -f x.o y.o z.o prog1 prog2 
bake complete, 1 update(s) performed
>> ls -1
Bakefile
test-results
x.c
y.c
z.c
#+END_SRC

* bake_main08
Checks that bake honors I/O redirection and silencing in commands and
their effects are correct.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: program="../../bake all"
#+BEGIN_SRC sh
bake: updating 'out_check' via 2 command(s)
echo Whats in the box? > pain.txt 
cat pain.txt 
Whats in the box?
bake: updating 'outin_check' via 2 command(s)
seq 1 300 > numbers.txt 
wc < numbers.txt 
 300  300 1092
bake: updating 'sil_check' via 1 command(s)
Dreams make good stories, but everything important happens when we are awake
bake: updating 'mul_check' via 16 command(s)
ls 
Bakefile
numbers.txt
pain.txt
test-results
x.c
y.c
z.c
echo Running silent commands with output redirection 
Running silent commands with output redirection
echo Done with silent commands, showing results 
Done with silent commands, showing results
ls -1 
1.txt
2.txt
3.txt
4.txt
5.txt
6.txt
7.txt
8.txt
Bakefile
count.txt
fear.txt
numbers.txt
pain.txt
test-results
x.c
y.c
z.c
cat fear.txt 
I must not fear.
Fear is the mind-killer.
Fear is the little-death that brings total obliteration.
I will face my fear.
I will permit it to pass over me and through me.
And when it has gone past I will turn the inner eye to see its path.
Where the fear has gone there will be nothing.
Only I will remain.
cat count.txt 
  8  61 305
bake: updating 'all' via 0 command(s)
bake complete, 5 update(s) performed
#+END_SRC

* bake_main09
Checks error handling when rules are missing or builds fail. No
Valgrind is used here, only output is checked.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> ../../bake all
Implicit rule cannot find file 'prog2'
bake failed
>> ../../bake no_such_targert
No rule to create target 'no_such_targert'
bake failed
>> ../../bake prog1
bake: updating 'x.o' via 1 command(s)
gcc -c x.c 
bake: updating 'y.o' via 1 command(s)
gcc -c y.c 
bake: updating 'prog1' via 3 command(s)
Building prog1
gcc -o prog1 x.o y.o 
prog1 Ready
bake complete, 3 update(s) performed
>> ../../bake prog3
bake: updating 'z.o' via 1 command(s)
gcc -c z.c 
bake: updating 'prog3' via 4 command(s)
echo Building prog3, errors ahead 
Building prog3, errors ahead
wc x.c missing.c z.c 
  9  17 136 x.c
wc: missing.c: No such file or directory
  5   9  69 z.c
 14  26 205 total
Bakefile:26 ERROR during target 'prog3', exit code 1
bake failed
>> ../../bake clean
bake: updating 'clean' via 1 command(s)
rm -f x.o y.o z.o prog1 prog2 
bake complete, 1 update(s) performed
>> ../../bake prog4
bake: updating 'x.o' via 1 command(s)
gcc -c x.c 
bake: updating 'error' via 3 command(s)
echo creating an error 
creating an error
wc -l no_such_file.txt 
wc: no_such_file.txt: No such file or directory
Bakefile:35 ERROR during target 'error', exit code 1
bake failed
Non-zero return code 1
#+END_SRC

* bake_main10
Stress testing with of larger, sequenced runs along with timestamp
adjustments. Also used to verify corner cases are handled correctly
like I/O redirection failing. Valgrind is not in use.

#+TESTY: set_test_directory $test_title
#+TESTY: cp -r data34/$test_title/* $testdir

#+TESTY: use_valgrind=0
#+BEGIN_SRC sh
>> ../../bake -f Makefile main_prog
bake: updating 'main_func.o' via 1 command(s)
gcc -c main_func.c 
bake: updating 'func_01.o' via 1 command(s)
gcc -c func_01.c 
bake: updating 'func_02.o' via 1 command(s)
gcc -c func_02.c 
bake: updating 'func_03.o' via 1 command(s)
gcc -c func_03.c 
bake: updating 'func_04.o' via 1 command(s)
gcc -c func_04.c 
bake: updating 'func_05.o' via 1 command(s)
gcc -c func_05.c 
bake: updating 'func_06.o' via 1 command(s)
gcc -c func_06.c 
bake: updating 'func_07.o' via 1 command(s)
gcc -c func_07.c 
bake: updating 'func_08.o' via 1 command(s)
gcc -c func_08.c 
bake: updating 'func_09.o' via 1 command(s)
gcc -c func_09.c 
bake: updating 'func_10.o' via 1 command(s)
gcc -c func_10.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main_func.o func_01.o func_02.o func_03.o func_04.o func_05.o func_06.o func_07.o func_08.o func_09.o func_10.o 
bake complete, 12 update(s) performed
>> ls -1
Bakefile
func_01.c
func_01.o
func_02.c
func_02.o
func_03.c
func_03.o
func_04.c
func_04.o
func_05.c
func_05.o
func_06.c
func_06.o
func_07.c
func_07.o
func_08.c
func_08.o
func_09.c
func_09.o
func_10.c
func_10.o
funcs.h
main_func.c
main_func.o
main_prog
Makefile
test-results
x.c
y.c
z.c
>> ./main_prog
Calling function func_01
Calling function func_02
Calling function func_03
Calling function func_04
Calling function func_05
Calling function func_06
Calling function func_07
Calling function func_08
Calling function func_09
Calling function func_10
>> rm -f func_06.o
>> touch -d -1min main_prog func_09.o
>> touch -d -1sec func_09.c
>> ../../bake -f Makefile
bake: updating 'func_06.o' via 1 command(s)
gcc -c func_06.c 
bake: updating 'func_09.o' via 1 command(s)
gcc -c func_09.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main_func.o func_01.o func_02.o func_03.o func_04.o func_05.o func_06.o func_07.o func_08.o func_09.o func_10.o 
bake: updating 'all' via 0 command(s)
bake complete, 4 update(s) performed
>> ls -1
Bakefile
func_01.c
func_01.o
func_02.c
func_02.o
func_03.c
func_03.o
func_04.c
func_04.o
func_05.c
func_05.o
func_06.c
func_06.o
func_07.c
func_07.o
func_08.c
func_08.o
func_09.c
func_09.o
func_10.c
func_10.o
funcs.h
main_func.c
main_func.o
main_prog
Makefile
test-results
x.c
y.c
z.c
>> touch -d -1min func_07.o
>> sed -i 's/function/YOUR LUCKY function/g' func_07.c
>> ../../bake -f Makefile
bake: updating 'func_07.o' via 1 command(s)
gcc -c func_07.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main_func.o func_01.o func_02.o func_03.o func_04.o func_05.o func_06.o func_07.o func_08.o func_09.o func_10.o 
bake: updating 'all' via 0 command(s)
bake complete, 3 update(s) performed
>> ./main_prog
Calling function func_01
Calling function func_02
Calling function func_03
Calling function func_04
Calling function func_05
Calling function func_06
Calling YOUR LUCKY function func_07
Calling function func_08
Calling function func_09
Calling function func_10
>> ../../bake deep
bake: updating 'level4A' via 1 command(s)
completed leve4A
bake: updating 'level4B' via 1 command(s)
completed leve4B
bake: updating 'level4C' via 1 command(s)
completed leve4C
bake: updating 'level3' via 1 command(s)
completed level3
bake: updating 'level2A' via 1 command(s)
completed level2A
bake: updating 'level2B' via 1 command(s)
completed level2B
bake: updating 'level1' via 1 command(s)
Completed level1
bake: updating 'deep' via 1 command(s)
Completed deep
bake complete, 8 update(s) performed
>> ../../bake outredir_fail
bake: updating 'outredir_fail' via 3 command(s)
mkdir -p a_directory 
echo This should fail > a_directory 
ERROR: can't open file for output: Is a directory
Bakefile:5 ERROR during target 'outredir_fail', exit code 123
bake failed
>> ../../bake inpredir_fail
bake: updating 'inpredir_fail' via 3 command(s)
echo Next command fails 
Next command fails
wc < no_such_file.txt 
ERROR: can't open file for input: No such file or directory
Bakefile:10 ERROR during target 'inpredir_fail', exit code 122
bake failed
Non-zero return code 1
#+END_SRC

