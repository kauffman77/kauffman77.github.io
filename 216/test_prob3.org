#+TITLE: Problem 3 bake_set_updates() / bake_do_updates() Tests
#+TESTY: PREFIX="prob3"
#+TESTY: USE_VALGRIND=1
# disable memory leak detection in forked children
#+TESTY: VALGRIND_PROG+=" --child-silent-after-fork=yes"

* bake_set_updates1
#+TESTY: program="./test_bake_funcs34 bake_set_updates1"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates1") { 
    // Checks the simplest case of a single rule with target dependent
    // on a source single file. The target file does not exist so an
    // update is required: the RULE_UPDATE_BIT / UP should be set on
    // calling bake_set_update() for the single explicit rule.
    system("rm -rf test-results/bake_set_updates1");
    system("cp -r data34/bake_set_updates1 test-results/");
    chdir("test-results/bake_set_updates1");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    printf("---CALL TO bake_set_updates()---\n");
    int ret = bake_set_updates(bake,"program");
    printf("ret: %d\n",ret);
    printf("BAKE STRUCT AFTER bake_set_updates()\n");
    bake_show_bake(bake,0);    
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
program : hello.c
	gcc -o program hello.c
---CALL TO bake_set_updates()---
ret: 1
BAKE STRUCT AFTER bake_set_updates()
bake_t {
  filename = Bakefile
  rule_capacity = 4
  rule_count = 2
  rules[ 0] =
    rule_t {
      target = program
      deps[ 0] = 'hello.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'program'
          tokens[ 3] = 'hello.c'
          tokens[ 4] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = hello.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC

* bake_set_updates2
#+TESTY: program="./test_bake_funcs34 bake_set_updates2"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates2") { 
    // program target is dependent on a .o file which is dependent on
    // a .c file. Both the .o and program should be deteceted as in
    // need of update.
    system("rm -rf test-results/bake_set_updates2");
    system("cp -r data34/bake_set_updates2 test-results/");
    chdir("test-results/bake_set_updates2");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    printf("---CALL TO bake_set_updates()---\n");
    int ret = bake_set_updates(bake,"program");
    printf("ret: %d\n",ret);
    printf("BAKE STRUCT AFTER bake_set_updates()\n");
    bake_show_bake(bake,0);    
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
program : hello.o
	gcc -o program hello.o

hello.o : hello.c
	gcc -c hello.c
---CALL TO bake_set_updates()---
ret: 1
BAKE STRUCT AFTER bake_set_updates()
bake_t {
  filename = Bakefile
  rule_capacity = 4
  rule_count = 3
  rules[ 0] =
    rule_t {
      target = program
      deps[ 0] = 'hello.o'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'program'
          tokens[ 3] = 'hello.o'
          tokens[ 4] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = hello.o
      deps[ 0] = 'hello.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'hello.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = hello.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC

* bake_set_updates3
#+TESTY: program="./test_bake_funcs34 bake_set_updates3"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates3") { 
    // program dependent on two .o files which each have an associated
    // .c file. All need updates.
    system("rm -rf test-results/bake_set_updates3");
    system("cp -r data34/bake_set_updates3 test-results/");
    chdir("test-results/bake_set_updates3");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    printf("---CALL TO bake_set_updates()---\n");
    int ret = bake_set_updates(bake,"program");
    printf("ret: %d\n",ret);
    printf("BAKE STRUCT AFTER bake_set_updates()\n");
    bake_show_bake(bake,0);    
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
program : hello.o goodbye.o
	gcc -o program hello.o goodbye.o

hello.o : hello.c
	gcc -c hello.c

goodbye.o : goodbye.c
	gcc -c goodbye.c
---CALL TO bake_set_updates()---
ret: 1
BAKE STRUCT AFTER bake_set_updates()
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 5
  rules[ 0] =
    rule_t {
      target = program
      deps[ 0] = 'hello.o'
      deps[ 1] = 'goodbye.o'
      deps[ 2] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'program'
          tokens[ 3] = 'hello.o'
          tokens[ 4] = 'goodbye.o'
          tokens[ 5] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = hello.o
      deps[ 0] = 'hello.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'hello.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = goodbye.o
      deps[ 0] = 'goodbye.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'goodbye.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = hello.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 4] =
    rule_t {
      target = goodbye.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC

* bake_set_updates4
#+TESTY: program="./test_bake_funcs34 bake_set_updates4"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates4") { 
    // program dependent on two .o files which each have an associated
    // .c file. Before calling bake_set_updates(), one C file is
    // compiled to a .o file which means it does not need an
    // update. Verifies that target files are checked and if they are
    // present and newer than the associated source file, no update is
    // needed.
    system("rm -rf test-results/bake_set_updates4");
    system("cp -r data34/bake_set_updates4 test-results/");
    chdir("test-results/bake_set_updates4");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    printf("---COMPILING A C FILE---\n");
    print_sys("gcc -c hello.c");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    printf("---CALL TO bake_set_updates()---\n");
    int ret = bake_set_updates(bake,"program");
    printf("bake_set_updates() ret: %d\n",ret);
    printf("BAKE STRUCT\n");
    bake_show_bake(bake,0);    
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
program : hello.o goodbye.o
	gcc -o program hello.o goodbye.o

hello.o : hello.c
	gcc -c hello.c

goodbye.o : goodbye.c
	gcc -c goodbye.c
---COMPILING A C FILE---
gcc -c hello.c
---CALL TO bake_set_updates()---
bake_set_updates() ret: 1
BAKE STRUCT
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 5
  rules[ 0] =
    rule_t {
      target = program
      deps[ 0] = 'hello.o'
      deps[ 1] = 'goodbye.o'
      deps[ 2] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'program'
          tokens[ 3] = 'hello.o'
          tokens[ 4] = 'goodbye.o'
          tokens[ 5] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = hello.o
      deps[ 0] = 'hello.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'hello.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = goodbye.o
      deps[ 0] = 'goodbye.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'goodbye.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = hello.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 4] =
    rule_t {
      target = goodbye.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC

* bake_set_updates5
#+TESTY: program="./test_bake_funcs34 bake_set_updates5"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates5") { 
    // Larger Bakefile used with 3 source files, .o dependencies for
    // each and a main_prog. Calls bake_set_updates() several times:
    // CALL 1: updates needed for all rules as nothing has been compiled
    // CALL 2: make is run first so no updates are needed
    // CALL 3: one .o file is removed so updates are needed for it and
    //         targets dependent on it
    system("rm -rf test-results/bake_set_updates5");
    system("cp -r data34/bake_set_updates5 test-results/");
    chdir("test-results/bake_set_updates5");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;

    printf("\n----CALL 1 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_show_bake(bake,0);    

    printf("\n---BUILDING USING MAKE---\n");
    print_sys("make -f Bakefile --no-print-directory");

    printf("\n----CALL 2 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_show_bake(bake,0);    

    printf("\n---REMOVING FILE(S)---\n");
    print_sys("rm -f func1.o");

    printf("\n----CALL 3 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_show_bake(bake,0);    

    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
main_prog : main.o func1.o func2.o
	gcc -o main_prog main.o func1.o func2.o

main.o : main.c
	gcc -c main.c

func1.o : func1.c
	gcc -c func1.c

func2.o : func2.c
	gcc -c func2.c

----CALL 1 TO bake_set_updates()----
ret: 1
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 7
  rules[ 0] =
    rule_t {
      target = main_prog
      deps[ 0] = 'main.o'
      deps[ 1] = 'func1.o'
      deps[ 2] = 'func2.o'
      deps[ 3] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'main_prog'
          tokens[ 3] = 'main.o'
          tokens[ 4] = 'func1.o'
          tokens[ 5] = 'func2.o'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = main.o
      deps[ 0] = 'main.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'main.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = func1.o
      deps[ 0] = 'func1.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func1.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = func2.o
      deps[ 0] = 'func2.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func2.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 4] =
    rule_t {
      target = main.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 5] =
    rule_t {
      target = func1.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 6] =
    rule_t {
      target = func2.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}

---BUILDING USING MAKE---
make -f Bakefile --no-print-directory
gcc -c main.c
gcc -c func1.c
gcc -c func2.c
gcc -o main_prog main.o func1.o func2.o

----CALL 2 TO bake_set_updates()----
ret: 0
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 7
  rules[ 0] =
    rule_t {
      target = main_prog
      deps[ 0] = 'main.o'
      deps[ 1] = 'func1.o'
      deps[ 2] = 'func2.o'
      deps[ 3] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'main_prog'
          tokens[ 3] = 'main.o'
          tokens[ 4] = 'func1.o'
          tokens[ 5] = 'func2.o'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = main.o
      deps[ 0] = 'main.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'main.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = func1.o
      deps[ 0] = 'func1.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func1.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = func2.o
      deps[ 0] = 'func2.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func2.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 4] =
    rule_t {
      target = main.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 5] =
    rule_t {
      target = func1.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 6] =
    rule_t {
      target = func2.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}

---REMOVING FILE(S)---
rm -f func1.o

----CALL 3 TO bake_set_updates()----
ret: 1
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 7
  rules[ 0] =
    rule_t {
      target = main_prog
      deps[ 0] = 'main.o'
      deps[ 1] = 'func1.o'
      deps[ 2] = 'func2.o'
      deps[ 3] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'main_prog'
          tokens[ 3] = 'main.o'
          tokens[ 4] = 'func1.o'
          tokens[ 5] = 'func2.o'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = main.o
      deps[ 0] = 'main.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'main.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = func1.o
      deps[ 0] = 'func1.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func1.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = func2.o
      deps[ 0] = 'func2.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func2.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 4] =
    rule_t {
      target = main.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 5] =
    rule_t {
      target = func1.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 6] =
    rule_t {
      target = func2.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC


* bake_set_updates6
#+TESTY: program="./test_bake_funcs34 bake_set_updates6"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates6") { 
    // Starts by using make to build all files, then modifies time
    // stamps to determine if dependency checks based on time
    // differences are done correctly.
    // CALL 1: a single c source file is modified requiring a .o to be
    // updated and the main_prog to be updatd.
    // CALL 2: all .o files are up to date but the main_prog is older
    // so requires an update.
    system("rm -rf test-results/bake_set_updates6");
    system("cp -r data34/bake_set_updates6 test-results/");
    chdir("test-results/bake_set_updates6");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;

    printf("\n---BUILDING USING MAKE---\n");
    print_sys("make -f Bakefile --no-print-directory");

    printf("\n---ALTERING TIMESTAMPS---\n");
    print_sys("touch -d -1min *");       // make files older
    print_sys("touch -d -1sec func2.c"); // make 1 c file newer

    printf("\n----CALL 1 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_show_bake(bake,0);    

    printf("\n---ALTERING TIMESTAMPS---\n");
    print_sys("touch -d -2min *.c");     // make c files older
    print_sys("touch -d -1sec *.o");     // make .o files newer
    print_sys("touch -d -1min main_prog"); // program older

    printf("\n----CALL 2 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_show_bake(bake,0);    
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
main_prog : main.o func1.o func2.o
	gcc -o main_prog main.o func1.o func2.o

main.o : main.c
	gcc -c main.c

func1.o : func1.c
	gcc -c func1.c

func2.o : func2.c
	gcc -c func2.c

---BUILDING USING MAKE---
make -f Bakefile --no-print-directory
gcc -c main.c
gcc -c func1.c
gcc -c func2.c
gcc -o main_prog main.o func1.o func2.o

---ALTERING TIMESTAMPS---
touch -d -1min *
touch -d -1sec func2.c

----CALL 1 TO bake_set_updates()----
ret: 1
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 7
  rules[ 0] =
    rule_t {
      target = main_prog
      deps[ 0] = 'main.o'
      deps[ 1] = 'func1.o'
      deps[ 2] = 'func2.o'
      deps[ 3] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'main_prog'
          tokens[ 3] = 'main.o'
          tokens[ 4] = 'func1.o'
          tokens[ 5] = 'func2.o'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = main.o
      deps[ 0] = 'main.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'main.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = func1.o
      deps[ 0] = 'func1.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func1.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = func2.o
      deps[ 0] = 'func2.c'
      deps[ 1] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func2.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 4] =
    rule_t {
      target = main.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 5] =
    rule_t {
      target = func1.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 6] =
    rule_t {
      target = func2.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}

---ALTERING TIMESTAMPS---
touch -d -2min *.c
touch -d -1sec *.o
touch -d -1min main_prog

----CALL 2 TO bake_set_updates()----
ret: 1
bake_t {
  filename = Bakefile
  rule_capacity = 8
  rule_count = 7
  rules[ 0] =
    rule_t {
      target = main_prog
      deps[ 0] = 'main.o'
      deps[ 1] = 'func1.o'
      deps[ 2] = 'func2.o'
      deps[ 3] = (null)
      rule_flags = 0x01 [ UP -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-o'
          tokens[ 2] = 'main_prog'
          tokens[ 3] = 'main.o'
          tokens[ 4] = 'func1.o'
          tokens[ 5] = 'func2.o'
          tokens[ 6] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 2
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 1] =
    rule_t {
      target = main.o
      deps[ 0] = 'main.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'main.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 5
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 2] =
    rule_t {
      target = func1.o
      deps[ 0] = 'func1.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func1.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 8
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 3] =
    rule_t {
      target = func2.o
      deps[ 0] = 'func2.c'
      deps[ 1] = (null)
      rule_flags = 0x00 [ -- -- -- ]
      cmd_count = 1
      cmds[ 0] =
        cmd_t {
          tokens[ 0] = 'gcc'
          tokens[ 1] = '-c'
          tokens[ 2] = 'func2.c'
          tokens[ 3] = (null)
          input_redirect = '(null)'
          output_redirect = '(null)'
          line_number = 11
          cmd_flags = 0x00 [ -- -- -- ]
        }
    }
  rules[ 4] =
    rule_t {
      target = main.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 5] =
    rule_t {
      target = func1.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
  rules[ 6] =
    rule_t {
      target = func2.c
      deps[ 0] = (null)
      rule_flags = 0x02 [ -- IM -- ]
      cmd_count = 0
    }
}
#+END_SRC

* bake_set_updates7
#+TESTY: program="./test_bake_funcs34 bake_set_updates7"
#+BEGIN_SRC sh
IF_TEST("bake_set_updates7") { 
    // Checks 2 error cases for bake_set_updates()
    // CALL 1: a non-existent target is passed which should return an
    // error and print an error message.
    // CALL 2: a .o file is required but there is no rule for it and
    // there is no existing file for it. An error should be returned
    // and a message about a missing file for an implicit rule should
    // be printed.
    system("rm -rf test-results/bake_set_updates7");
    system("cp -r data34/bake_set_updates7 test-results/");
    chdir("test-results/bake_set_updates7");
    printf("CONTENTS OF BAKEFILE\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;

    printf("\n----CALL 1 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"no_targ");
    printf("ret: %d\n",ret);

    printf("\n----CALL 2 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);

    bake_free(bake);
    chdir("../..");
}
---OUTPUT---
CONTENTS OF BAKEFILE
main_prog : main.o func1.o func2.o
	gcc -o main_prog main.o func1.o func2.o

main.o : main.c
	gcc -c main.c

# A missing rule
# func1.o : func1.c
#	gcc -c func1.c

func2.o : func2.c
	gcc -c func2.c

----CALL 1 TO bake_set_updates()----
No rule to create target 'no_targ'
ret: -1

----CALL 2 TO bake_set_updates()----
Implicit rule cannot find file 'func1.o'
ret: -1
#+END_SRC

* bake_do_updates1
#+TESTY: program="./test_bake_funcs34 bake_do_updates1"
#+BEGIN_SRC sh
IF_TEST("bake_do_updates1") { 
    // Small case of needing to compile a .c to a .o then to a
    // program; checks the basic behavior of bake_do_updates()
    system("rm -rf test-results/bake_do_updates1");
    system("cp -r data34/bake_do_updates1 test-results/");
    chdir("test-results/bake_do_updates1");
    printf("\n----DIRECTORY CONTENTS---\n");
    print_sys("ls -1");
    printf("\n---CONTENTS OF BAKEFILE---\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;
    printf("\n----CALL TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"program");
    printf("ret: %d\n",ret);
    printf("\n----CALL TO bake_do_updates()----\n");
    ret = bake_do_updates(bake,"program");
    printf("ret: %d\n",ret);
    printf("\n----DIRECTORY CONTENTS---\n");
    print_sys("ls -1");
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---

----DIRECTORY CONTENTS---
ls -1
Bakefile
hello.c

---CONTENTS OF BAKEFILE---
program : hello.o
	gcc -o program hello.o

hello.o : hello.c
	gcc -c hello.c

----CALL TO bake_set_updates()----
ret: 1

----CALL TO bake_do_updates()----
bake: updating 'hello.o' via 1 command(s)
gcc -c hello.c 
bake: updating 'program' via 1 command(s)
gcc -o program hello.o 
ret: 2

----DIRECTORY CONTENTS---
ls -1
Bakefile
hello.c
hello.o
program
#+END_SRC

* bake_do_updates2
#+TESTY: program="./test_bake_funcs34 bake_do_updates2"
#+BEGIN_SRC sh
IF_TEST("bake_do_updates2") { 
    // Modest case of needing to compile sevearal .c to a .o files and
    // link them to become a program. Uses repeated calls to examine
    // whether bake_set_updates() and bake_do_updtes() correctly
    // refrain from rebuilding parts of the program that do not need
    // to be rebuilt, once after the first build (no updates) and
    // again after altering timestamps to emulate a change in source
    // files.
    system("rm -rf test-results/bake_do_updates2");
    system("cp -r data34/bake_do_updates2 test-results/");
    chdir("test-results/bake_do_updates2");
    printf("\n----DIRECTORY CONTENTS---\n");
    print_sys("ls -1");
    printf("\n---CONTENTS OF BAKEFILE---\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;
    printf("\n----CALL 1 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    printf("\n----CALL 1 TO bake_do_updates()----\n");
    ret = bake_do_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    printf("\n----DIRECTORY CONTENTS---\n");
    print_sys("ls -1");
    printf("\n----CALL 2 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    printf("\n----CALL 2 TO bake_do_updates()----\n");
    ret = bake_do_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    printf("\n----DIRECTORY CONTENTS---\n");
    print_sys("ls -1");
    printf("\n---ALTERING TIMESTAMPS---\n");
    print_sys("touch -d -1min *");       // make files older
    print_sys("touch -d -1sec func2.c"); // make 1 c file newer
    printf("\n----CALL 3 TO bake_set_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    printf("\n----CALL 3 TO bake_do_updates()----\n");
    ret = bake_do_updates(bake,"main_prog");
    printf("ret: %d\n",ret);
    bake_free(bake);
    chdir("../..");
}
---OUTPUT---

----DIRECTORY CONTENTS---
ls -1
Bakefile
func1.c
func2.c
main.c

---CONTENTS OF BAKEFILE---
main_prog : main.o func1.o func2.o
	gcc -o main_prog main.o func1.o func2.o

main.o : main.c
	gcc -c main.c

func1.o : func1.c
	gcc -c func1.c

func2.o : func2.c
	gcc -c func2.c

----CALL 1 TO bake_set_updates()----
ret: 1

----CALL 1 TO bake_do_updates()----
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'func1.o' via 1 command(s)
gcc -c func1.c 
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
ret: 4

----DIRECTORY CONTENTS---
ls -1
Bakefile
func1.c
func1.o
func2.c
func2.o
main.c
main.o
main_prog

----CALL 2 TO bake_set_updates()----
ret: 0

----CALL 2 TO bake_do_updates()----
ret: 0

----DIRECTORY CONTENTS---
ls -1
Bakefile
func1.c
func1.o
func2.c
func2.o
main.c
main.o
main_prog

---ALTERING TIMESTAMPS---
touch -d -1min *
touch -d -1sec func2.c

----CALL 3 TO bake_set_updates()----
ret: 1

----CALL 3 TO bake_do_updates()----
bake: updating 'func2.o' via 1 command(s)
gcc -c func2.c 
bake: updating 'main_prog' via 1 command(s)
gcc -o main_prog main.o func1.o func2.o 
ret: 2
#+END_SRC

* bake_do_updates3
#+TESTY: program="./test_bake_funcs34 bake_do_updates3"
#+BEGIN_SRC sh
IF_TEST("bake_do_updates3") { 
    // Checks error cases for bake_do_updates()
    // CALL 1: while building a single target, the first command will
    // return a non-zero exit status which should terminate the build
    // with an error message and -1 return value.
    // CALL 2: while building a a program, a .o fails to build due to
    // the command to be run not being found. This should terminate
    // the build with an error message and -1 return value.
    system("rm -rf test-results/bake_do_updates3");
    system("cp -r data34/bake_do_updates3 test-results/");
    chdir("test-results/bake_do_updates3");
    printf("\n---CONTENTS OF BAKEFILE---\n");
    system("cat Bakefile");
    bake_t *bake = bake_create_from_file("Bakefile");
    bake_add_implicit_rules(bake);
    int ret;

    printf("\n----CALL 1 TO bake_do_updates()----\n");
    ret = bake_set_updates(bake,"failfiles");
    ret = bake_do_updates(bake,"failfiles");
    printf("ret: %d\n",ret);

    printf("\n----CALL 2 TO bake_do_updates()----\n");
    ret = bake_set_updates(bake,"main_prog");
    ret = bake_do_updates(bake,"main_prog");
    printf("ret: %d\n",ret);

    bake_free(bake);
    chdir("../..");
}
---OUTPUT---

---CONTENTS OF BAKEFILE---
main_prog : main.o func1.o func2.o
	gcc -o main_prog main.o func1.o func2.o

main.o : main.c
	gcc -c main.c

func1.o : func1.c
	gee_see_see -c func1.c

func2.o : func2.c
	gcc -c func2.c

countlines : func1.c func2.c main.c
	wc -l func1.c func2.c main.c

failfiles : main.c 
	cat main.c not_there.c


----CALL 1 TO bake_do_updates()----
bake: updating 'failfiles' via 1 command(s)
cat main.c not_there.c 
#include <stdio.h>
void func1();
void func2();
int main(){
  printf("In main\n");
  func1();
  func2();
  return 0;
}
cat: not_there.c: No such file or directory
Bakefile:17 ERROR during target 'failfiles', exit code 1
ret: -1

----CALL 2 TO bake_do_updates()----
bake: updating 'main.o' via 1 command(s)
gcc -c main.c 
bake: updating 'func1.o' via 1 command(s)
gee_see_see -c func1.c 
ERROR: command failed to exec: No such file or directory
Bakefile:8 ERROR during target 'func1.o', exit code 121
ret: -1
#+END_SRC

